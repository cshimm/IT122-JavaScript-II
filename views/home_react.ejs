<html>
    <head>
        <title>Classic Games</title>
        <link rel="stylesheet" href="/css/style.css">

        <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
        <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

        <!-- Don't use this in production: -->
        <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    </head>
    <body>
        <div id="root"></div>
        <script type="text/babel">
            const App = () => {
                const [selectedGame, setSelectedGame] = React.useState(null);
                const [isEditingDetail, setIsEditingDetail] = React.useState(false);
                const [gamesList, setGamesList] = React.useState();
                React.useEffect(() => {
                    fetchAllGames();
                }, []);

                const fetchAllGames = async () => {
                    fetch("/api/games").then(res => res.json())
                        .then((json) => {
                            setGamesList(json)
                        });
                }
                const ListItems = (props) => {
                    const listItemClicked = (e) => {
                        let game = gamesList.find((g) => {
                            return `${g.title} (${g.yearReleased})` === e.target.innerText;
                        });
                        setIsEditingDetail(false);
                        setSelectedGame(game);
                    }
                    const listItems = props.games.map((g) =>
                        <li className="game" key={g.title}>
                        <a className="game-link" onClick={listItemClicked}>
                            {`${g.title}  (${g.yearReleased})`}
                        </a>
                    </li>);
                        return <ul className="games"> {listItems} </ul>
                };

                const EditForm = (props) => {
                    return <form>
                        <label>
                            <input
                                type="text" name={props.target} placeholder={props.label} onChange={props.itemChanged} />
                        </label>
                    </form>;
                }
                const Details = (props) => {
                    return <div>
                        <h2>Details about {props.selectedGame.title}: </h2>
                        <div>Studio: {props.selectedGame.studio}</div>
                        <div>Genre: {props.selectedGame.genre}</div>
                        <div>Year released: { props.selectedGame.yearReleased}</div>
                        <br/>
                        <EditButton isEditing={isEditingDetail} />
                        <ClearButton />
                        <DeleteButton />
                    </div>;
                }
                const ClearButton = () => {
                    const clearItems = () => {
                        setSelectedGame(null);
                    }
                    return <button onClick={clearItems}>Clear</button>;
                }
                const DeleteButton = () => {
                    const fetchData = async () => {
                        fetch(`api/games/delete/${selectedGame.title}`, {method: 'DELETE'})
                            .then(res => res.json())
                            .then(() => {
                                fetchAllGames()
                                setSelectedGame(null);
                            });
                    }
                    return <button onClick={fetchData}>Delete</button>;
                }
                const EditButton = (props) => {
                    const updateGame = async (game) => {
                        fetch(`api/games/update/${selectedGame.title}`, {
                            method: 'POST',
                            headers : {'Content-Type': 'application/json'},
                            body: JSON.stringify(game)
                        })
                            .then(res => res.json())
                    }
                    const handleUpdate = () => {
                        const updatedGamesList = [...gamesList]
                        const allFieldsBlank = Object.values(props.newGame).every(val => val === '');
                        if (allFieldsBlank) {
                            const newGame = {
                                title: 'Title',
                                yearReleased: 'Year Released',
                                genre: 'Genre',
                                studio: 'Studio'
                            }
                            updatedGamesList.push(newGame);
                            setSelectedGame(newGame);
                        }
                        else {
                            updatedGamesList[updatedGamesList.indexOf(selectedGame)] = props.newGame;
                            setSelectedGame(props.newGame);
                        }
                        updateGame(props.newGame)
                        setGamesList(updatedGamesList);
                    }
                    const editItems = () => {
                        setIsEditingDetail(!isEditingDetail);
                        if (isEditingDetail) {
                             // This line gets called when "save" is clicked
                            handleUpdate();
                        }
                    }
                    return <button onClick={editItems}>{props.isEditing ? "Save" : "Edit"}</button>;
                }
                const EditDetails = (props) => {
                    const [newGame, setNewGame] = React.useState({
                        title: "",
                        genre: "",
                        studio: "",
                        yearReleased: ""
                    });
                    const itemChanged = (e) => {
                        let field = e.target.name;
                        let tempGame = {...newGame};
                        tempGame[field] = e.target.value;
                        setNewGame(tempGame);
                    }
                    return <div>
                        <h2>Details about {props.selectedGame.title}: </h2>
                        <div>Title:  <EditForm label={props.selectedGame.title} itemChanged={itemChanged} target="title" /></div>
                        <div>Studio:  <EditForm label={props.selectedGame.studio} itemChanged={itemChanged} target="studio" /></div>
                        <div>Genre:  <EditForm label={props.selectedGame.genre} itemChanged={itemChanged} target="genre" /></div>
                        <div>Year released: <EditForm label={props.selectedGame.yearReleased} itemChanged={itemChanged} target="yearReleased" /></div>
                        <br/>
                        <EditButton newGame={newGame} isEditing={isEditingDetail} />
                        <ClearButton />
                        <DeleteButton />
                    </div>
                }
                return <div>
                    <h2>Classic Games</h2>
                    {
                        gamesList &&
                        <ListItems games={gamesList} />
                    }
                    <hr/>
                    { selectedGame && (
                        isEditingDetail ? <EditDetails selectedGame={selectedGame} /> : <Details selectedGame={selectedGame} isEditing={isEditingDetail} />
                    )}
                </div>
            };
            ReactDOM.render(<App />, document.getElementById('root'));
        </script>
    </body>
</html>